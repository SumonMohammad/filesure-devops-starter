name: CI/CD Pipeline for FileSure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/filesure-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Worker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./worker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/filesure-worker:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-local:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull Docker images from DockerHub
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/filesure-api:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/filesure-worker:latest

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # --- Caching Kind node image ---
      - name: Cache Kind node image
        uses: actions/cache@v4
        with:
          path: /tmp/kind-node-image
          key: kind-node-v1.30.0

      - name: Preload Kind node image
        run: |
          mkdir -p /tmp/kind-node-image
          if [ -f /tmp/kind-node-image/kind-node.tar ]; then
            echo "Loading cached Kind node image..."
            docker load -i /tmp/kind-node-image/kind-node.tar || true
          else
            echo "No cache found, Kind will pull fresh image."
          fi

      - name: Create Kind cluster
        run: |
          kind create cluster --name filesure-cluster --config kubernetes/kind-config.yaml
          kubectl cluster-info --context kind-filesure-cluster
          kubectl config use-context kind-filesure-cluster

      - name: Save Kind node image to cache
        if: always()
        run: |
          echo "Saving Kind node image for caching..."
          docker save kindest/node:v1.30.0 -o /tmp/kind-node-image/kind-node.tar || true

      - name: Wait for cluster readiness
        run: |
          echo "Waiting for nodes to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=180s || true
          
          echo "Waiting for kube-system pods to be ready..."
          for i in {1..30}; do
            READY=$(kubectl get pods -n kube-system --no-headers 2>/dev/null | grep -c "Running" || true)
            TOTAL=$(kubectl get pods -n kube-system --no-headers 2>/dev/null | wc -l || true)
            echo "Pods ready: $READY / $TOTAL"
            if [ "$READY" -ge 2 ]; then
              echo "System pods are running."
              break
            fi
            sleep 10
          done
          kubectl get pods -n kube-system

      - name: Load Docker images into Kind cluster
        run: |
          kind load docker-image ${{ secrets.DOCKERHUB_USERNAME }}/filesure-api:latest --name filesure-cluster
          kind load docker-image ${{ secrets.DOCKERHUB_USERNAME }}/filesure-worker:latest --name filesure-cluster

      - name: Create namespaces
        run: |
          kubectl create namespace filesure --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace keda --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Secrets in filesure namespace
        run: |
          kubectl create secret generic filesure-secrets -n filesure \
            --from-literal=mongo-uri=${{ secrets.MONGO_URI }} \
            --from-literal=aws-access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=aws-secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --from-literal=aws-region=${{ secrets.AWS_REGION }} \
            --from-literal=aws-bucket-name=${{ secrets.AWS_BUCKET_NAME }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Secrets in keda namespace
        run: |
          kubectl create secret generic filesure-secrets -n keda \
            --from-literal=mongo-uri=${{ secrets.MONGO_URI }} \
            --from-literal=aws-access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=aws-secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --from-literal=aws-region=${{ secrets.AWS_REGION }} \
            --from-literal=aws-bucket-name=${{ secrets.AWS_BUCKET_NAME }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f kubernetes/namespace.yml
          kubectl apply -f kubernetes/mongodb.yml -n filesure
          kubectl apply -f kubernetes/api.yml -n filesure
          kubectl apply -f kubernetes/grafana.yml -n filesure
          kubectl apply -f kubernetes/prometheus.yml -n filesure
          kubectl apply -f kubernetes/mongodb-exporter.yml -n filesure
          kubectl apply -f kubernetes/worker-service.yml -n filesure
          kubectl apply -f keda/trigger-auth.yml -n filesure
          kubectl apply -f keda/worker-scaledjob.yml -n filesure

          echo "Waiting for deployments..."
          kubectl rollout status deployment/api -n filesure --timeout=180s || true
          kubectl rollout status deployment/prometheus -n filesure --timeout=180s || true

      - name: Verify deployment
        run: |
          echo "Checking deployment status..."
          kubectl get all -n filesure
          kubectl get scaledjob -n filesure
