name: CI/CD Pipeline for FileSure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  KIND_NODE_IMAGE: kindest/node:v1.30.0

jobs:
  build-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for API changes
        id: api_changes
        run: |
          if git diff --quiet HEAD^ HEAD -- api/; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: steps.api_changes.outputs.changed == 'true'

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        if: steps.api_changes.outputs.changed == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API image
        if: steps.api_changes.outputs.changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/filesure-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-worker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for Worker changes
        id: worker_changes
        run: |
          if git diff --quiet HEAD^ HEAD -- worker/; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: steps.worker_changes.outputs.changed == 'true'

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        if: steps.worker_changes.outputs.changed == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Worker image
        if: steps.worker_changes.outputs.changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./worker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/filesure-worker:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-local:
    needs: [build-api, build-worker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      # --- Docker login for pulling images ---
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Install tools ---
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # --- Cache Kind node image ---
      - name: Cache Kind node image
        uses: actions/cache@v4
        with:
          path: /tmp/kind-node-image
          key: kind-node-${{ env.KIND_NODE_IMAGE }}

      - name: Preload Kind node image (if cached)
        run: |
          mkdir -p /tmp/kind-node-image
          if [ -f /tmp/kind-node-image/kind-node.tar ]; then
            docker load -i /tmp/kind-node-image/kind-node.tar || true
          fi

      - name: Create Kind cluster
        run: |
          kind create cluster --name filesure-cluster --image "$KIND_NODE_IMAGE" --config kubernetes/kind-config.yaml
          kubectl cluster-info --context kind-filesure-cluster
          kubectl config use-context kind-filesure-cluster

      - name: Save Kind node image to cache
        if: always()
        run: |
          docker save "${KIND_NODE_IMAGE}" -o /tmp/kind-node-image/kind-node.tar || true

      - name: Wait for cluster readiness
        run: |
          kubectl wait --for=condition=Ready nodes --all --timeout=120s || true
          kubectl wait --for=condition=Ready pods --all -n kube-system --timeout=120s || true

      # --- Load Docker images into Kind ---
      - name: Pull & Load Docker images
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/filesure-api:latest || true
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/filesure-worker:latest || true
          kind load docker-image ${{ secrets.DOCKERHUB_USERNAME }}/filesure-api:latest --name filesure-cluster || true
          kind load docker-image ${{ secrets.DOCKERHUB_USERNAME }}/filesure-worker:latest --name filesure-cluster || true

      # --- Namespaces & Secrets ---
      - name: Create namespaces
        run: |
          kubectl create namespace filesure --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace keda --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Secrets
        run: |
          for ns in filesure keda; do
            kubectl create secret generic filesure-secrets -n $ns \
              --from-literal=mongo-uri=${{ secrets.MONGO_URI }} \
              --from-literal=aws-access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
              --from-literal=aws-secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              --from-literal=aws-region=${{ secrets.AWS_REGION }} \
              --from-literal=aws-bucket-name=${{ secrets.AWS_BUCKET_NAME }} \
              --dry-run=client -o yaml | kubectl apply -f -
          done

      # --- Helm + KEDA ---
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2

      - name: Cache Helm repo
        uses: actions/cache@v4
        with:
          path: ~/.cache/helm
          key: ${{ runner.os }}-helm

      - name: Install KEDA via Helm
        run: |
          helm repo add kedacore https://kedacore.github.io/charts
          helm repo update
          helm upgrade --install keda kedacore/keda --namespace keda --version 2.15.0
          kubectl rollout status deployment/keda-operator -n keda --timeout=180s || true

      # --- Deploy Manifests ---
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/namespace.yml
          kubectl apply -f kubernetes/mongodb.yml -n filesure
          kubectl apply -f kubernetes/api.yml -n filesure
          kubectl apply -f kubernetes/grafana.yml -n filesure
          kubectl apply -f kubernetes/prometheus.yml -n filesure
          kubectl apply -f kubernetes/mongodb-exporter.yml -n filesure
          kubectl apply -f kubernetes/worker-service.yml -n filesure
          kubectl apply -f keda/trigger-auth.yml -n filesure
          kubectl apply -f keda/worker-scaledjob.yml -n filesure

          kubectl rollout status deployment/api -n filesure --timeout=120s || true
          kubectl rollout status deployment/prometheus -n filesure --timeout=120s || true

      - name: Verify deployment
        run: |
          kubectl get all -n filesure || true
          kubectl get scaledjob -n filesure || true
          kubectl get pods -n keda || true
