name: CI/CD Pipeline for FileSure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/filesure-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Worker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./worker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/filesure-worker:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-local:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull Docker images from DockerHub
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/filesure-api:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/filesure-worker:latest

      - name: Debug working directory
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing kubernetes directory contents:"
          ls -la kubernetes/
          echo "Contents of kind-config.yaml:"
          cat kubernetes/kind-config.yaml

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Set up Kind manually
        run: |
          # Install Kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
          # Create the Kind cluster
          kind create cluster --name filesure-cluster --config kubernetes/kind-config.yaml
          
          # Verify cluster creation
          kind get clusters
          
          # Set kubectl context
          kubectl config use-context kind-filesure-cluster
          
          # Verify kubectl context
          kubectl config current-context
          kubectl cluster-info

      - name: Verify Kind cluster readiness
        run: |
          echo "Waiting for Kind cluster to be ready..."
          kubectl wait --for=condition=Ready pod --all --timeout=120s
          kubectl get nodes

      - name: Load Docker images into Kind cluster
        run: |
          kind load docker-image ${{ secrets.DOCKERHUB_USERNAME }}/filesure-api:latest --name filesure-cluster
          kind load docker-image ${{ secrets.DOCKERHUB_USERNAME }}/filesure-worker:latest --name filesure-cluster

      - name: Create namespaces
        run: |
          kubectl create namespace filesure --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace keda --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Secrets in filesure namespace
        run: |
          kubectl create secret generic filesure-secrets -n filesure \
            --from-literal=mongo-uri=${{ secrets.MONGO_URI }} \
            --from-literal=aws-access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=aws-secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --from-literal=aws-region=${{ secrets.AWS_REGION }} \
            --from-literal=aws-bucket-name=${{ secrets.AWS_BUCKET_NAME }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Secrets in keda namespace
        run: |
          kubectl create secret generic filesure-secrets -n keda \
            --from-literal=mongo-uri=${{ secrets.MONGO_URI }} \
            --from-literal=aws-access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=aws-secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --from-literal=aws-region=${{ secrets.AWS_REGION }} \
            --from-literal=aws-bucket-name=${{ secrets.AWS_BUCKET_NAME }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f kubernetes/namespace.yml
          kubectl apply -f kubernetes/mongodb.yml -n filesure
          kubectl apply -f kubernetes/api.yml -n filesure
          kubectl apply -f kubernetes/grafana.yml -n filesure
          kubectl apply -f kubernetes/prometheus.yml -n filesure
          kubectl apply -f kubernetes/mongodb-exporter.yml -n filesure
          kubectl apply -f kubernetes/worker-service.yml -n filesure
          kubectl apply -f keda/trigger-auth.yaml -n filesure
          kubectl apply -f keda/worker-scaledjob.yml -n filesure
          echo "Deployments applied successfully"
          echo "Waiting for deployments to be ready..."
          kubectl rollout status deployment/api -n filesure --timeout=120s
          kubectl rollout status deployment/prometheus -n filesure --timeout=120s

      - name: Verify deployment
        run: |
          echo "Checking deployment status..."
          kubectl get all -n filesure
          kubectl get scaledjob -n filesure
          echo "Deployment verification completed"